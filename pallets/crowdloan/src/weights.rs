// This file is part of Metaverse.Network & Bit.Country.

// Copyright (C) 2020-2022 Metaverse.Network & Bit.Country .
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for crowdloan
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-21, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/metaverse-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// crowdloan
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --template=./template/weight-template.hbs
// --output
// ./pallets/crowdloan/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for crowdloan.
pub trait WeightInfo {	fn set_distributor_origin() -> Weight;	fn remove_distributor_origin() -> Weight;	fn transfer_unlocked_reward() -> Weight;	fn transfer_vested_reward() -> Weight;	fn remove_vested_reward() -> Weight;}

/// Weights for crowdloan using the for collator node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {	// Storage: Crowdloan CrowdloanDistributorOrigins (r:1 w:1)
	// Proof Skipped: Crowdloan CrowdloanDistributorOrigins (max_values: None, max_size: None, mode: Measured)
	fn set_distributor_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `41`
		//  Estimated: `2516`
		// Minimum execution time: 7_883 nanoseconds.
		Weight::from_parts(8_189_000, 2516)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Crowdloan CrowdloanDistributorOrigins (r:1 w:1)
	// Proof Skipped: Crowdloan CrowdloanDistributorOrigins (max_values: None, max_size: None, mode: Measured)
	fn remove_distributor_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `115`
		//  Estimated: `2590`
		// Minimum execution time: 9_324 nanoseconds.
		Weight::from_parts(9_442_000, 2590)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Crowdloan CrowdloanDistributorOrigins (r:1 w:0)
	// Proof Skipped: Crowdloan CrowdloanDistributorOrigins (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn transfer_unlocked_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `7929`
		// Minimum execution time: 25_482 nanoseconds.
		Weight::from_parts(26_411_000, 7929)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Crowdloan CrowdloanDistributorOrigins (r:1 w:0)
	// Proof Skipped: Crowdloan CrowdloanDistributorOrigins (max_values: None, max_size: None, mode: Measured)
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(3650), added: 6125, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	fn transfer_vested_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `386`
		//  Estimated: `17966`
		// Minimum execution time: 42_492 nanoseconds.
		Weight::from_parts(43_941_000, 17966)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Vesting Vesting (r:1 w:1)
	// Proof: Vesting Vesting (max_values: None, max_size: Some(3650), added: 6125, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn remove_vested_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `475`
		//  Estimated: `12502`
		// Minimum execution time: 24_267 nanoseconds.
		Weight::from_parts(24_799_000, 12502)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {	fn set_distributor_origin() -> Weight {
		Weight::from_parts(8_189_000, 2516)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn remove_distributor_origin() -> Weight {
		Weight::from_parts(9_442_000, 2590)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn transfer_unlocked_reward() -> Weight {
		Weight::from_parts(26_411_000, 7929)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn transfer_vested_reward() -> Weight {
		Weight::from_parts(43_941_000, 17966)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	fn remove_vested_reward() -> Weight {
		Weight::from_parts(24_799_000, 12502)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
}
