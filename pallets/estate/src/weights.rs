// This file is part of Metaverse.Network & Bit.Country.

// Copyright (C) 2020-2022 Metaverse.Network & Bit.Country .
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for estate
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-09, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/metaverse-node
// benchmark
// --pallet=estate
// --extrinsic=*
// --steps=20
// --repeat=10
// --execution=wasm
// --wasm-execution=compiled
// --template=./template/weight-template.hbs
// --output
// ./pallets/estate/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for estate.
pub trait WeightInfo {	fn mint_land() -> Weight;	fn mint_lands() -> Weight;	fn transfer_land() -> Weight;	fn mint_estate() -> Weight;	fn dissolve_estate() -> Weight;	fn add_land_unit_to_estate() -> Weight;	fn remove_land_unit_from_estate() -> Weight;	fn create_estate() -> Weight;	fn transfer_estate() -> Weight;	fn issue_undeployed_land_blocks() -> Weight;	fn freeze_undeployed_land_blocks() -> Weight;	fn unfreeze_undeployed_land_blocks() -> Weight;	fn approve_undeployed_land_blocks() -> Weight;	fn unapprove_undeployed_land_blocks() -> Weight;	fn transfer_undeployed_land_blocks() -> Weight;	fn deploy_land_block() -> Weight;	fn on_initialize() -> Weight;	fn burn_undeployed_land_blocks() -> Weight; fn create_lease_offer() -> Weight;	fn accept_lease_offer() -> Weight;	fn cancel_lease() -> Weight;	fn remove_expired_lease() -> Weight;	fn remove_lease_offer() -> Weight;	fn collect_rent() -> Weight;}

/// Weights for estate using the for collator node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn mint_land() -> Weight {
		(103_900_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn mint_lands() -> Weight {
		(156_300_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn transfer_land() -> Weight {
		(80_300_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn mint_estate() -> Weight {
		(111_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(11 as Weight))
	}
	fn dissolve_estate() -> Weight {
		(137_200_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(12 as Weight))
	}
	fn add_land_unit_to_estate() -> Weight {
		(85_500_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn remove_land_unit_from_estate() -> Weight {
		(115_400_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn create_estate() -> Weight {
		(217_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().writes(16 as Weight))
	}
	fn transfer_estate() -> Weight {
		(96_400_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn issue_undeployed_land_blocks() -> Weight {
		(308_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(42 as Weight))
	}
	fn freeze_undeployed_land_blocks() -> Weight {
		(33_600_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn unfreeze_undeployed_land_blocks() -> Weight {
		(28_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn approve_undeployed_land_blocks() -> Weight {
		(29_700_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn unapprove_undeployed_land_blocks() -> Weight {
		(29_600_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn transfer_undeployed_land_blocks() -> Weight {
		(66_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn deploy_land_block() -> Weight {
		(373_900_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
	}
	fn on_initialize() -> Weight {
		(900_000 as Weight)
	}
	fn burn_undeployed_land_blocks() -> Weight {
		(36_600_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn create_lease_offer() -> Weight {
		(159_200_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn accept_lease_offer() -> Weight {
		(155_300_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn cancel_lease() -> Weight {
		(131_600_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn remove_expired_lease() -> Weight {
		(246_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn remove_lease_offer() -> Weight {
		(173_100_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn collect_rent() -> Weight {
		(168_600_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {	fn mint_land() -> Weight {
		(103_900_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(7 as Weight))			.saturating_add(RocksDbWeight::get().writes(7 as Weight))	}	fn mint_lands() -> Weight {
		(156_300_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(8 as Weight))			.saturating_add(RocksDbWeight::get().writes(10 as Weight))	}	fn transfer_land() -> Weight {
		(80_300_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(5 as Weight))			.saturating_add(RocksDbWeight::get().writes(4 as Weight))	}	fn mint_estate() -> Weight {
		(111_800_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(9 as Weight))			.saturating_add(RocksDbWeight::get().writes(11 as Weight))	}	fn dissolve_estate() -> Weight {
		(137_200_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(12 as Weight))			.saturating_add(RocksDbWeight::get().writes(12 as Weight))	}	fn add_land_unit_to_estate() -> Weight {
		(85_500_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(7 as Weight))			.saturating_add(RocksDbWeight::get().writes(5 as Weight))	}	fn remove_land_unit_from_estate() -> Weight {
		(115_400_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(10 as Weight))			.saturating_add(RocksDbWeight::get().writes(7 as Weight))	}	fn create_estate() -> Weight {
		(217_800_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(12 as Weight))			.saturating_add(RocksDbWeight::get().writes(16 as Weight))	}	fn transfer_estate() -> Weight {
		(96_400_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(6 as Weight))			.saturating_add(RocksDbWeight::get().writes(4 as Weight))	}	fn issue_undeployed_land_blocks() -> Weight {
		(308_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(2 as Weight))			.saturating_add(RocksDbWeight::get().writes(42 as Weight))	}	fn freeze_undeployed_land_blocks() -> Weight {
		(33_600_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(2 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn unfreeze_undeployed_land_blocks() -> Weight {
		(28_800_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(2 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn approve_undeployed_land_blocks() -> Weight {
		(29_700_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(2 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn unapprove_undeployed_land_blocks() -> Weight {
		(29_600_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(2 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn transfer_undeployed_land_blocks() -> Weight {
		(66_000_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(2 as Weight))			.saturating_add(RocksDbWeight::get().writes(3 as Weight))	}	fn deploy_land_block() -> Weight {
		(373_900_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(11 as Weight))			.saturating_add(RocksDbWeight::get().writes(10 as Weight))	}	fn on_initialize() -> Weight {
		(900_000 as Weight)	}	fn burn_undeployed_land_blocks() -> Weight {
		(36_600_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(3 as Weight))			.saturating_add(RocksDbWeight::get().writes(3 as Weight))	}	fn create_lease_offer() -> Weight {
		(159_200_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(4 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn accept_lease_offer() -> Weight {
		(155_300_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(5 as Weight))			.saturating_add(RocksDbWeight::get().writes(3 as Weight))	}	fn cancel_lease() -> Weight {
		(131_600_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(4 as Weight))			.saturating_add(RocksDbWeight::get().writes(2 as Weight))	}	fn remove_expired_lease() -> Weight {
		(246_800_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(4 as Weight))			.saturating_add(RocksDbWeight::get().writes(2 as Weight))	}	fn remove_lease_offer() -> Weight {
		(173_100_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(1 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}	fn collect_rent() -> Weight {
		(168_600_000 as Weight)			.saturating_add(RocksDbWeight::get().reads(4 as Weight))			.saturating_add(RocksDbWeight::get().writes(1 as Weight))	}
}
