// This file is part of Metaverse.Network & Bit.Country.

// Copyright (C) 2020-2022 Metaverse.Network & Bit.Country .
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for mining
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-21, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/metaverse-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// mining
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --template=./template/weight-template.hbs
// --output
// ./pallets/mining/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for mining.
pub trait WeightInfo {	fn add_minting_origin() -> Weight;	fn remove_minting_origin() -> Weight;	fn update_round_length() -> Weight;	fn update_mining_issuance_config() -> Weight;	fn mint() -> Weight;	fn burn() -> Weight;	fn deposit() -> Weight;	fn withdraw() -> Weight;	fn pause_mining_round() -> Weight;	fn unpause_mining_round() -> Weight;}

/// Weights for mining using the for collator node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {	// Storage: Mining MintingOrigins (r:1 w:1)
	// Proof Skipped: Mining MintingOrigins (max_values: None, max_size: None, mode: Measured)
	fn add_minting_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `2551`
		// Minimum execution time: 8_213 nanoseconds.
		Weight::from_parts(8_665_000, 2551)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Mining MintingOrigins (r:1 w:1)
	// Proof Skipped: Mining MintingOrigins (max_values: None, max_size: None, mode: Measured)
	fn remove_minting_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `150`
		//  Estimated: `2625`
		// Minimum execution time: 9_209 nanoseconds.
		Weight::from_parts(9_396_000, 2625)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Mining Round (r:1 w:1)
	// Proof Skipped: Mining Round (max_values: Some(1), max_size: None, mode: Measured)
	fn update_round_length() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `571`
		// Minimum execution time: 6_876 nanoseconds.
		Weight::from_parts(7_040_000, 571)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Mining Round (r:1 w:0)
	// Proof Skipped: Mining Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Mining MiningConfig (r:0 w:1)
	// Proof Skipped: Mining MiningConfig (max_values: Some(1), max_size: None, mode: Measured)
	fn update_mining_issuance_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `647`
		// Minimum execution time: 7_741 nanoseconds.
		Weight::from_parts(8_115_000, 647)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Mining MintingOrigins (r:1 w:0)
	// Proof Skipped: Mining MintingOrigins (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `8043`
		// Minimum execution time: 22_058 nanoseconds.
		Weight::from_parts(22_826_000, 8043)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Mining MintingOrigins (r:1 w:0)
	// Proof Skipped: Mining MintingOrigins (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:1 w:1)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(41), added: 2516, mode: MaxEncodedLen)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `8043`
		// Minimum execution time: 23_789 nanoseconds.
		Weight::from_parts(24_969_000, 8043)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Tokens Accounts (r:2 w:2)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `420`
		//  Estimated: `10398`
		// Minimum execution time: 31_285 nanoseconds.
		Weight::from_parts(31_798_000, 10398)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Mining MintingOrigins (r:1 w:0)
	// Proof Skipped: Mining MintingOrigins (max_values: None, max_size: None, mode: Measured)
	// Storage: Tokens Accounts (r:2 w:2)
	// Proof: Tokens Accounts (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:0)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `727`
		//  Estimated: `10997`
		// Minimum execution time: 29_256 nanoseconds.
		Weight::from_parts(29_933_000, 10997)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Mining Round (r:1 w:0)
	// Proof Skipped: Mining Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Mining MiningPaused (r:1 w:1)
	// Proof Skipped: Mining MiningPaused (max_values: Some(1), max_size: None, mode: Measured)
	fn pause_mining_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1142`
		// Minimum execution time: 7_702 nanoseconds.
		Weight::from_parts(8_074_000, 1142)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Mining Round (r:1 w:0)
	// Proof Skipped: Mining Round (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Mining MiningPaused (r:1 w:1)
	// Proof Skipped: Mining MiningPaused (max_values: Some(1), max_size: None, mode: Measured)
	fn unpause_mining_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `100`
		//  Estimated: `1190`
		// Minimum execution time: 8_295 nanoseconds.
		Weight::from_parts(8_775_000, 1190)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {	fn add_minting_origin() -> Weight {
		Weight::from_parts(8_665_000, 2551)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn remove_minting_origin() -> Weight {
		Weight::from_parts(9_396_000, 2625)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn update_round_length() -> Weight {
		Weight::from_parts(7_040_000, 571)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn update_mining_issuance_config() -> Weight {
		Weight::from_parts(8_115_000, 647)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn mint() -> Weight {
		Weight::from_parts(22_826_000, 8043)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn burn() -> Weight {
		Weight::from_parts(24_969_000, 8043)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn deposit() -> Weight {
		Weight::from_parts(31_798_000, 10398)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn withdraw() -> Weight {
		Weight::from_parts(29_933_000, 10997)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn pause_mining_round() -> Weight {
		Weight::from_parts(8_074_000, 1142)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn unpause_mining_round() -> Weight {
		Weight::from_parts(8_775_000, 1190)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
