// This file is part of Metaverse.Network & Bit.Country.

// Copyright (C) 2020-2022 Metaverse.Network & Bit.Country .
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for reward
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-21, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/metaverse-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// reward
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --template=./template/weight-template.hbs
// --output
// ./pallets/reward/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for reward.
pub trait WeightInfo {	fn create_campaign() -> Weight;	fn create_nft_campaign() -> Weight;	fn claim_reward() -> Weight;	fn claim_reward_root() -> Weight;	fn claim_nft_reward() -> Weight;	fn claim_nft_reward_root() -> Weight;	fn set_reward() -> Weight;	fn set_reward_root() -> Weight;	fn set_nft_reward() -> Weight;	fn set_nft_reward_root() -> Weight;	fn close_campaign() -> Weight;	fn close_nft_campaign() -> Weight;	fn cancel_campaign() -> Weight;	fn cancel_nft_campaign() -> Weight;	fn add_set_reward_origin() -> Weight;	fn remove_set_reward_origin() -> Weight;	fn on_finalize() -> Weight;}

/// Weights for reward using the for collator node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {	// Storage: Reward NextTrieIndex (r:1 w:1)
	// Proof Skipped: Reward NextTrieIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Reward NextCampaignId (r:1 w:1)
	// Proof Skipped: Reward NextCampaignId (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Reward CampaignMerkleRoots (r:0 w:1)
	// Proof Skipped: Reward CampaignMerkleRoots (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward CampaignClaimedAccounts (r:0 w:1)
	// Proof Skipped: Reward CampaignClaimedAccounts (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward Campaigns (r:0 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	fn create_campaign() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1755`
		//  Estimated: `12368`
		// Minimum execution time: 46_892 nanoseconds.
		Weight::from_parts(47_856_000, 12368)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Reward NextTrieIndex (r:1 w:1)
	// Proof Skipped: Reward NextTrieIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: Reward NextCampaignId (r:1 w:1)
	// Proof Skipped: Reward NextCampaignId (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Proof Skipped: OrmlNFT Tokens (max_values: None, max_size: None, mode: Measured)
	// Storage: OrmlNFT Classes (r:1 w:0)
	// Proof Skipped: OrmlNFT Classes (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Reward CampaignMerkleRoots (r:0 w:1)
	// Proof Skipped: Reward CampaignMerkleRoots (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward CampaignClaimedAccounts (r:0 w:1)
	// Proof Skipped: Reward CampaignClaimedAccounts (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward Campaigns (r:0 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	fn create_nft_campaign() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2541`
		//  Estimated: `26330`
		// Minimum execution time: 49_867 nanoseconds.
		Weight::from_parts(51_776_000, 26330)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:1 w:1)
	// Proof Skipped: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:1 w:1)
	fn claim_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2848`
		//  Estimated: `13249`
		// Minimum execution time: 42_198 nanoseconds.
		Weight::from_parts(43_780_000, 13249)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward CampaignMerkleRoots (r:1 w:0)
	// Proof Skipped: Reward CampaignMerkleRoots (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward CampaignClaimedAccounts (r:1 w:1)
	// Proof Skipped: Reward CampaignClaimedAccounts (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: unknown `0xb7200f59aadbf6d1b9256342e6991416affd964ad90df566106c806d3c5eb1a6` (r:1 w:0)
	// Proof Skipped: unknown `0xb7200f59aadbf6d1b9256342e6991416affd964ad90df566106c806d3c5eb1a6` (r:1 w:0)
	fn claim_reward_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2914`
		//  Estimated: `24159`
		// Minimum execution time: 48_659 nanoseconds.
		Weight::from_parts(50_524_000, 24159)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Proof Skipped: OrmlNFT Tokens (max_values: None, max_size: None, mode: Measured)
	// Storage: Nft LockedCollection (r:1 w:0)
	// Proof Skipped: Nft LockedCollection (max_values: None, max_size: None, mode: Measured)
	// Storage: OrmlNFT StackableCollection (r:1 w:0)
	// Proof Skipped: OrmlNFT StackableCollection (max_values: None, max_size: None, mode: Measured)
	// Storage: OrmlNFT Classes (r:1 w:0)
	// Proof Skipped: OrmlNFT Classes (max_values: None, max_size: None, mode: Measured)
	// Storage: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:1 w:1)
	// Proof Skipped: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:1 w:1)
	fn claim_nft_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3098`
		//  Estimated: `33438`
		// Minimum execution time: 51_345 nanoseconds.
		Weight::from_parts(52_709_000, 33438)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward CampaignMerkleRoots (r:1 w:0)
	// Proof Skipped: Reward CampaignMerkleRoots (max_values: None, max_size: None, mode: Measured)
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Proof Skipped: OrmlNFT Tokens (max_values: None, max_size: None, mode: Measured)
	// Storage: Nft LockedCollection (r:1 w:0)
	// Proof Skipped: Nft LockedCollection (max_values: None, max_size: None, mode: Measured)
	// Storage: OrmlNFT StackableCollection (r:1 w:0)
	// Proof Skipped: OrmlNFT StackableCollection (max_values: None, max_size: None, mode: Measured)
	// Storage: OrmlNFT Classes (r:1 w:0)
	// Proof Skipped: OrmlNFT Classes (max_values: None, max_size: None, mode: Measured)
	// Storage: unknown `0xf79f59badead8bbd60eff30f639305d784f04c0804fe566c4a5749fc98362b8c` (r:1 w:0)
	// Proof Skipped: unknown `0xf79f59badead8bbd60eff30f639305d784f04c0804fe566c4a5749fc98362b8c` (r:1 w:0)
	fn claim_nft_reward_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3510`
		//  Estimated: `41895`
		// Minimum execution time: 109_467 nanoseconds.
		Weight::from_parts(118_897_000, 41895)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Reward SetRewardOrigins (r:1 w:0)
	// Proof Skipped: Reward SetRewardOrigins (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:1 w:1)
	// Proof Skipped: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:1 w:1)
	fn set_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2175`
		//  Estimated: `13950`
		// Minimum execution time: 27_665 nanoseconds.
		Weight::from_parts(30_996_000, 13950)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Reward SetRewardOrigins (r:1 w:0)
	// Proof Skipped: Reward SetRewardOrigins (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward CampaignMerkleRoots (r:1 w:1)
	// Proof Skipped: Reward CampaignMerkleRoots (max_values: None, max_size: None, mode: Measured)
	// Storage: unknown `0x0000000000000000000000000000000000000000000000000000000000000001` (r:1 w:1)
	// Proof Skipped: unknown `0x0000000000000000000000000000000000000000000000000000000000000001` (r:1 w:1)
	fn set_reward_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2175`
		//  Estimated: `18600`
		// Minimum execution time: 27_737 nanoseconds.
		Weight::from_parts(31_147_000, 18600)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Reward SetRewardOrigins (r:1 w:0)
	// Proof Skipped: Reward SetRewardOrigins (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:1 w:1)
	// Proof Skipped: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:1 w:1)
	fn set_nft_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2246`
		//  Estimated: `14163`
		// Minimum execution time: 30_507 nanoseconds.
		Weight::from_parts(32_853_000, 14163)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Reward SetRewardOrigins (r:1 w:0)
	// Proof Skipped: Reward SetRewardOrigins (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward CampaignMerkleRoots (r:1 w:1)
	// Proof Skipped: Reward CampaignMerkleRoots (max_values: None, max_size: None, mode: Measured)
	// Storage: unknown `0x0000000000000000000000000000000000000000000000000000000000000001` (r:0 w:1)
	// Proof Skipped: unknown `0x0000000000000000000000000000000000000000000000000000000000000001` (r:0 w:1)
	fn set_nft_reward_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2525`
		//  Estimated: `17525`
		// Minimum execution time: 28_447 nanoseconds.
		Weight::from_parts(32_100_000, 17525)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Reward CampaignMerkleRoots (r:1 w:1)
	// Proof Skipped: Reward CampaignMerkleRoots (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward CampaignClaimedAccounts (r:0 w:1)
	// Proof Skipped: Reward CampaignClaimedAccounts (max_values: None, max_size: None, mode: Measured)
	// Storage: unknown `0xb7200f59aadbf6d1b9256342e6991416affd964ad90df566106c806d3c5eb1a6` (r:0 w:1)
	// Proof Skipped: unknown `0xb7200f59aadbf6d1b9256342e6991416affd964ad90df566106c806d3c5eb1a6` (r:0 w:1)
	// Storage: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:0 w:1)
	// Proof Skipped: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:0 w:1)
	fn close_campaign() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2822`
		//  Estimated: `21663`
		// Minimum execution time: 58_441 nanoseconds.
		Weight::from_parts(67_727_000, 21663)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: OrmlNFT Tokens (r:2 w:2)
	// Proof Skipped: OrmlNFT Tokens (max_values: None, max_size: None, mode: Measured)
	// Storage: Reward CampaignMerkleRoots (r:1 w:1)
	// Proof Skipped: Reward CampaignMerkleRoots (max_values: None, max_size: None, mode: Measured)
	// Storage: unknown `0x55c64d95550fdcc6332bd1d9dee2f2cf1f1dd5f1db3f5e6ec397fa98545f8727` (r:0 w:1)
	// Proof Skipped: unknown `0x55c64d95550fdcc6332bd1d9dee2f2cf1f1dd5f1db3f5e6ec397fa98545f8727` (r:0 w:1)
	// Storage: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:0 w:1)
	// Proof Skipped: unknown `0xd861ea1ebf4800d4b89f4ff787ad79ee96d9a708c85b57da7eb8f9ddeda61291` (r:0 w:1)
	fn close_nft_campaign() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3630`
		//  Estimated: `30653`
		// Minimum execution time: 56_085 nanoseconds.
		Weight::from_parts(61_669_000, 30653)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_campaign() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2362`
		//  Estimated: `7440`
		// Minimum execution time: 45_290 nanoseconds.
		Weight::from_parts(46_849_000, 7440)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Reward Campaigns (r:1 w:1)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: OrmlNFT Tokens (r:1 w:1)
	// Proof Skipped: OrmlNFT Tokens (max_values: None, max_size: None, mode: Measured)
	fn cancel_nft_campaign() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2789`
		//  Estimated: `13131`
		// Minimum execution time: 40_938 nanoseconds.
		Weight::from_parts(42_579_000, 13131)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Reward SetRewardOrigins (r:1 w:1)
	// Proof Skipped: Reward SetRewardOrigins (max_values: None, max_size: None, mode: Measured)
	fn add_set_reward_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `961`
		//  Estimated: `3436`
		// Minimum execution time: 13_783 nanoseconds.
		Weight::from_parts(15_236_000, 3436)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Reward SetRewardOrigins (r:1 w:1)
	// Proof Skipped: Reward SetRewardOrigins (max_values: None, max_size: None, mode: Measured)
	fn remove_set_reward_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1035`
		//  Estimated: `3510`
		// Minimum execution time: 15_136 nanoseconds.
		Weight::from_parts(15_816_000, 3510)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Reward Campaigns (r:2 w:0)
	// Proof Skipped: Reward Campaigns (max_values: None, max_size: None, mode: Measured)
	fn on_finalize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1803`
		//  Estimated: `6753`
		// Minimum execution time: 18_647 nanoseconds.
		Weight::from_parts(19_256_000, 6753)
			.saturating_add(T::DbWeight::get().reads(2))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {	fn create_campaign() -> Weight {
		Weight::from_parts(47_856_000, 12368)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	fn create_nft_campaign() -> Weight {
		Weight::from_parts(51_776_000, 26330)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	fn claim_reward() -> Weight {
		Weight::from_parts(43_780_000, 13249)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn claim_reward_root() -> Weight {
		Weight::from_parts(50_524_000, 24159)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn claim_nft_reward() -> Weight {
		Weight::from_parts(52_709_000, 33438)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn claim_nft_reward_root() -> Weight {
		Weight::from_parts(118_897_000, 41895)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn set_reward() -> Weight {
		Weight::from_parts(30_996_000, 13950)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn set_reward_root() -> Weight {
		Weight::from_parts(31_147_000, 18600)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn set_nft_reward() -> Weight {
		Weight::from_parts(32_853_000, 14163)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn set_nft_reward_root() -> Weight {
		Weight::from_parts(32_100_000, 17525)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn close_campaign() -> Weight {
		Weight::from_parts(67_727_000, 21663)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	fn close_nft_campaign() -> Weight {
		Weight::from_parts(61_669_000, 30653)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	fn cancel_campaign() -> Weight {
		Weight::from_parts(46_849_000, 7440)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	fn cancel_nft_campaign() -> Weight {
		Weight::from_parts(42_579_000, 13131)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	fn add_set_reward_origin() -> Weight {
		Weight::from_parts(15_236_000, 3436)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn remove_set_reward_origin() -> Weight {
		Weight::from_parts(15_816_000, 3510)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn on_finalize() -> Weight {
		Weight::from_parts(19_256_000, 6753)
			.saturating_add(RocksDbWeight::get().reads(2))
	}
}
